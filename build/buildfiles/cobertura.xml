<!-- =================================================================== -->
<!--         Cobertura setup tasks to instrument code and generate       -->
<!--         coverage reports.                                           -->
<!-- =================================================================== -->
<project name="cobertura" xmlns:savant="antlib:net.java.savant.dep.ant">
  <import file="property-adapter.xml"/>

  <target name="cobertura" depends="compile,-init-cobertura,cobertura_run,cobertura_report,cobertura_coverage_checker"
          description="Generates a report of what lines of code are executed during tests"/>

  <target name="-init-cobertura">
    <delete file="cobertura.ser"/>
    <property name="cobertura_exclude_names" value="**/*Mock*.class"/>
    <property name="cobertura.maxmemory" value="512M"/>
    <property name="cobertura.forkmode" value="once"/>

    <property name="build.reports.dir" value="${basedir}"/>
    <property name="dir.test.output" value="${build.reports.dir}/reports/cobertura-junit"/>

    <property name="haltonfailure" value="yes"/>
    <property name="haltonerror" value="yes"/>

    <!-- check if we need to run cobertura-checker -->
    <!-- if any of the following propperties are set and not equel '0', set 'run_cobertura_checker' to true -->
    <!-- (set and not 0) or (set and not 0) or ... -->
    <condition property="run_cobertura_checker">
      <or>
        <and>
          <isset property="cobertura.branchrate"/>
          <not> <equals arg1="${cobertura.branchrate}" arg2="0"/> </not>
        </and>
        <and>
          <isset property="cobertura.linerate"/>
          <not> <equals arg1="${cobertura.linerate}" arg2="0"/> </not>
        </and>
        <and>
          <isset property="cobertura.packagebranchrate"/>
          <not> <equals arg1="${cobertura.packagebranchrate}" arg2="0"/> </not>
        </and>
        <and>
          <isset property="cobertura.packagelinerate"/>
          <not> <equals arg1="${cobertura.packagelinerate}" arg2="0"/> </not>
        </and>
        <and>
          <isset property="cobertura.totalbranchrate"/>
          <not> <equals arg1="${cobertura.totalbranchrate}" arg2="0"/> </not>
        </and>
        <and>
          <isset property="cobertura.totallinerate"/>
          <not> <equals arg1="${cobertura.totallinerate}" arg2="0"/> </not>
        </and>
      </or>
    </condition>

    <savant:dependencies id="cobertura.deps">
      <savant:artifactgroup type="classpath.deps">
        <savant:artifact name="cobertura" group="sourceforge" projectname="cobertura" version="1.9" type="jar"/>
        <savant:artifact name="asm" group="objectweb" projectname="asm" version="2.2.1" type="jar"/>
        <savant:artifact name="asm-tree" group="objectweb" projectname="asm" version="2.2.1" type="jar"/>
        <savant:artifact name="jakarta-oro" group="apache" projectname="jakarta" version="2.0.8" type="jar"/>
<!--         <savant:artifact name="jakarta-regexp" group="apache" projectname="jakarta" version="1.3" type="jar"/> -->
        <savant:artifact name="log4j" group="apache" projectname="log4j" version="1.2.14" type="jar"/> 
      </savant:artifactgroup>
    </savant:dependencies>

    <savant:dependencypath pathid="cobertura.classpath.deps" types="classpath.deps">
      <savant:mmpcompatibility/>
      <savant:dependencies refid="cobertura.deps"/>
      <savant:workflow refid="workflow"/>
    </savant:dependencypath>

    <taskdef resource="tasks.properties" classpathref="cobertura.classpath.deps"/>
  </target>

  <target name="cobertura_run">
    <cobertura-instrument todir="${dir.dist}/instrumented-classes" maxmemory="${cobertura.maxmemory}"
                          classpathref="cobertura.classpath.deps">
      <ignore regex="org.apache.log4j.*"/>
      <fileset dir="${dir.compile}" excludes="${cobertura_exclude_names}">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>

    <test.macro dir.test.output="${dir.test.output}"
                dir.src="${dir.test.src}"
                haltonfailure="${haltonfailure}"
                haltonerror="${haltonerror}"
                cactus.contextURL="${cactus.contextURL}"
                net.sourceforge.cobertura.datafile="net.sourceforge.cobertura.datafile"
                extra.path="${dir.dist}/instrumented-classes"
                test.forkmode="${cobertura.forkmode}"/>
  </target>

  <target name="-init-cobertura_report" depends="-init-cobertura">
    <!-- Note: do not overwrite reports.output.dir, otherwise several links would be broken. -->
    <property name="reports.output.dir" value="${build.reports.dir}/reports"/>
    <property name="cobertura.report.dir" value="${reports.output.dir}/cobertura"/>
    <mkdir dir="${cobertura.report.dir}"/>
    <!-- Note: for QBZCRT tool working properly we need to copy data file into ${cobertura.report.dir} -->
    <copy file="cobertura.ser" todir="${cobertura.report.dir}" />
  </target>

  <target name="cobertura_report_html" depends="-init-cobertura_report">
    <cobertura-report format="html" destdir="${cobertura.report.dir}" maxmemory="${cobertura.maxmemory}">
      <fileset dir="${dir.src}">
        <include name="**/*.java" />
        <exclude name="${cobertura_exclude_names}"/>
      </fileset>
    </cobertura-report>
  </target>

  <target name="cobertura_report_xml" depends="-init-cobertura_report">
    <cobertura-report format="xml" destdir="${cobertura.report.dir}" maxmemory="${cobertura.maxmemory}">
      <fileset dir="${dir.src}">
        <include name="**/*.java" />
        <exclude name="${cobertura_exclude_names}"/>
      </fileset>
    </cobertura-report>
  </target>

  <target name="cobertura_report" depends="cobertura_report_html, cobertura_report_xml"/>

  <target name="cobertura_coverage_checker" if="run_cobertura_checker">
    <!-- default values for checker properties, if they are not set yet -->
    <property name="cobertura.branchrate" value="0"/>
    <property name="cobertura.linerate" value="0"/>
    <property name="cobertura.packagebranchrate" value="0"/>
    <property name="cobertura.packagelinerate" value="0"/>
    <property name="cobertura.totalbranchrate" value="0"/>
    <property name="cobertura.totallinerate" value="0"/>

    <!-- intended to be overriden in project's build file to produce more specific coverage measure. -->
    <cobertura-check failureproperty="cobertura.coverage.failure" haltonfailure="${haltonfailure}"
                     branchrate="${cobertura.branchrate}" linerate="${cobertura.linerate}"
                     packagebranchrate="${cobertura.packagebranchrate}" packagelinerate="${cobertura.packagelinerate}"
                     totalbranchrate="${cobertura.totalbranchrate}" totallinerate="${cobertura.totallinerate}"/>
  </target>

  <!-- target name="cobertura-coverage-checker" depends="compile,cobertura_setup,cobertura_run,-cobertura_coverage_checker,cobertura_report,cobertura_coverage_checker"/-->
  <target name="cobertura-coverage-checker" depends="compile,-init-cobertura,cobertura_run,-cobertura_coverage_checker,cobertura_report,cobertura_coverage_checker"/>
  <target name="-cobertura_coverage_checker">
    <!-- intended to be overriden in project's build file to produce more specific coverage measure. -->
    <property name="run_cobertura_checker" value="the value is meaningless, it just defines the property"/>
    <property name="cobertura.totallinerate" value="70"/>
  </target>

  <target name="ccc" depends="cobertura-coverage-checker"/>
</project>

