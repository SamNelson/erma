/*
 * ERMA Gradle build file.
 *
 * To execute build:
 * $ ./gradlew
 *
 * If executing via a pre-installed version of gradle or your IDE, make sure to export GRADLE_OPTS
 * as defined in this project's gradlew script.
 */
 
import org.gradle.plugins.signing.Sign

dependsOnChildren()

allprojects {
  apply plugin: 'java'
  apply plugin: 'signing'
  apply plugin: 'maven'
  
  signing {
    sign configurations.archives
  }
}

task dist(dependsOn: [build, signArchives]) << {
  File distFolder = new File(buildDir.getCanonicalPath() + File.separator + 'dist')
  distFolder.mkdirs()
  for (project in subprojects) {
    for (archiveTask in project.tasks.withType(Jar)) {
      copy {
        from archiveTask.archivePath
        into distFolder
      }
    }
    for (signTask in project.tasks.withType(Sign)) {
      copy {
        from signTask.signatureFiles
        into distFolder
      }
    }
  }
}

subprojects { subproject ->
  apply plugin: 'project-reports'
  
  defaultTasks 'assemble'
  
  buildscript {
    // using a variable to make wiki look cleaner
    def githubBase = 'https://github.com/valkolovos/gradle_cobertura/raw/master/ivy'
    apply from: "${githubBase}/gradle_cobertura/gradle_cobertura/1.0-rc4/coberturainit.gradle"
  }
  
  sourceSets {
    main {
      java { srcDir 'src/java' }
    }
    test {
      java { srcDir 'test/src/java' }
      resources { srcDir 'test/src/java' }
    }
  }
  
  repositories {
    mavenCentral()
  }
  
  def pomConfig = {
    name project.projectName
    description project.description
    packaging 'jar'
    url 'https://github.com/erma/erma'
    inceptionYear '2008'
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    scm {
      connection 'scm:git:https://github.com/erma/erma.git'
      developerConnection 'scm:git:git@github.com:erma/erma.git'
      url 'https://github.com/erma/erma'
    }
    developers {
      developer {
        id 'ConnorWGarvey'
        name 'Connor Garvey'
        email 'connorwgarvey@gmail.com'
        url 'http://www.connorgarvey.com'
        organization 'Orbitz Worldwide, LLC'
        organizationUrl 'http://www.orbitz.com'
        roles {
          role 'developer'
        }
        timezone '-6'
      }
    }
  }
  
  subproject.basePomConfig = pomConfig
  
  configure(install.repositories.mavenInstaller) {
    pom.project pomConfig
  }
  
  uploadArchives {
    repositories.mavenDeployer {
      repository(url: 'file://localhost/tmp/erma/')
      pom.project pomConfig
    }
  }
  
  // erma/abc sub-project generates jar with basename "abc"
  def shortProjectName = project.name.split('/')[-1]
  jar.baseName = shortProjectName
  
  task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = shortProjectName
  }
  
  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    basename = shortProjectName
  }
  
  artifacts {
    archives jar, sourceJar, javadocJar
  }
  
  task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-1'
  }
}
