<!--
=====================================================================
Copyright (c) 2003, Orbitz, All Rights Reserved.
Last modified by: $Author$
$Revision$, $Date$
=====================================================================

=== Dependencies ====================================================
Targets:
  NONE
Properties:
  dir.applications: build.xml
  dir.appFilesets: build.xml
  dir.compile: build.xml
  dir.dist: buil.xml
  dir.filesets: build.xml
Optional Properties:
  artifacts.user    - artifact scp user
  artifacts.server  - artifact scp server
  artifacts.basedir - artifact scp dest base dir
  artifacts.keyfile - artifact scp ssh key file
Custom Tasks:
  foreach
External Files:
  NONE
=====================================================================

=== Description =====================================================
The targets in this file are used to publish artifacts
=====================================================================
-->
<project name="release" xmlns:savant="antlib:net.java.savant.dep.ant">

  <!--
  ===================================================================
  Artifact creation targets
  ===================================================================
  -->
  <macrodef name="publish-artifacts">
    <attribute name="workflow"/>
    <sequential>
      <savant:macroforeach macro="publish-single" mappedproperty="name">
        <mapper type="regexp" from=".*[\/\\]([^\/\\]*).include" to="\1"/>
        <fileset dir="${dir.filesets}" includes="*.include" />
        <param name="workflow" value="@{workflow}"/>
      </savant:macroforeach>
    </sequential>
  </macrodef>

  <macrodef name="publish-single">
    <attribute name="workflow"/>
    <attribute name="name"/>
    <sequential>
      <available property="append.jdk.version" file="${dir.filesets}/@{name}.appendjdk"/>
      <condition property="version.jdk" value="-jdk${ant.java.version}">
        <istrue value="${append.jdk.version}"/>
      </condition>
      <condition property="version.jdk" value="">
        <isfalse value="${append.jdk.version}"/>
      </condition>

      <savant:publish from="${dir.dist}/@{name}.jar">
        <savant:publishworkflow refid="@{workflow}"/>
        <savant:artifact group="orbitz" projectname="${ant.project.name}" name="@{name}" version="${version}${version.jdk}" type="jar"/>
        <savant:dependencies refid="deps"/>
      </savant:publish>

      <savant:publish from="${dir.dist}/@{name}-src.jar" failonerror="false">
        <savant:publishworkflow refid="@{workflow}"/>
        <savant:artifact group="orbitz" projectname="${ant.project.name}" name="@{name}-src" version="${version}${version.jdk}" type="jar"/>
      </savant:publish>
    </sequential>
  </macrodef>

  <!-- Publishes the artifact mapped to name.publish by the publish target -->
  <macrodef name="unpublish-single">
    <attribute name="name"/>
    <attribute name="workflow"/>
    <sequential>
      <available property="append.jdk.version" file="${dir.filesets}/@{name}.appendjdk"/>
      <condition property="version.jdk" value="-jdk${ant.java.version}">
        <istrue value="${append.jdk.version}"/>
      </condition>
      <condition property="version.jdk" value="">
        <isfalse value="${append.jdk.version}"/>
      </condition>
      <savant:dependencyclean>
        <savant:dependencies>
          <savant:artifactgroup type="compile">
            <savant:artifact name="@{name}" group="${name.group}" projectname="${ant.project.name}" version="${version}${version.jdk}" type="jar"/>
            <savant:artifact name="@{name}-src" group="${name.group}" projectname="${ant.project.name}" version="${version}${version.jdk}" type="jar"/>
          </savant:artifactgroup>
        </savant:dependencies>
        <savant:publishworkflow refid="@{workflow}"/>
      </savant:dependencyclean>
    </sequential>
  </macrodef>


  <target name="release" depends="publish"/>
  <target name="publish" depends="dist" description="Publishes out all the artifacts to the local repository">
    <publish-artifacts workflow="release-publishworkflow"/>
  </target>

  <target name="unpublish" description="Removes project artifacts previously published to the local repository">
    <savant:macroforeach macro="unpublish-single" mappedproperty="name">
      <mapper type="regexp" from=".*[\/\\]([^\/\\]*).include" to="\1"/>
      <fileset dir="${dir.filesets}" includes="*.include" />
      <param name="workflow" value="release-publishworkflow"/>
    </savant:macroforeach>
  </target>

</project>
