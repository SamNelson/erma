/*
 * ERMA Gradle build file.
 *
 * To execute build:
 * $ ./gradlew
 *
 * If executing via a pre-installed version of gradle or your IDE, make sure to export GRADLE_OPTS
 * as defined in this project's gradlew script.
 */

import org.gradle.plugins.signing.Sign

allprojects {
  apply plugin: 'java'
}


subprojects { subproject ->
  apply plugin: 'signing'
  apply plugin: 'maven'
  apply plugin: 'project-reports'
  apply plugin: 'sonar-runner'
  
  signing {
    sign configurations.archives
    required false
  }
  
  defaultTasks 'assemble'
  
  buildscript {
    def coberturaPluginVersion = '1.2.1'
    apply from: "https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/${coberturaPluginVersion}/coberturainit.gradle"
  }
  
  sourceSets {
    main {
      java { srcDir 'src/java' }
    }
    test {
      java { srcDir 'test/src/java' }
      resources { srcDir 'test/src/java' }
    }
  }
  
  repositories {
    mavenCentral()
  }
 
  def pomConfig = {
    name project.projectName
    description project.description
    packaging 'jar'
    url 'https://github.com/erma/erma'
    inceptionYear '2008'
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    scm {
      connection 'scm:git:git@github.com:erma/erma.git'
      developerConnection 'scm:git:git@github.com:erma/erma.git'
      url 'git@github.com:erma/erma.git'
    }
    developers {
      developer {
        id 'ConnorWGarvey'
        name 'Connor Garvey'
        email 'connorwgarvey@gmail.com'
        url 'http://www.connorgarvey.com'
        organization 'Orbitz Worldwide, LLC'
        organizationUrl 'http://www.orbitz.com'
        roles {
          role 'developer'
        }
        timezone '-6'
      }
    }
    parent {
      groupId 'org.sonatype.oss'
      artifactId 'oss-parent'
      version '7'
    }
  }
  
  configure(install.repositories.mavenInstaller) {
    pom.project pomConfig
  }
  
  uploadArchives {
    if (project.hasProperty('sonatypeUserName') && project.hasProperty('sonatypePassword')) {
      dependsOn << [ signArchives ]
      repositories.mavenDeployer {
        beforeDeployment { deployment ->
          signPom(deployment)
          for (signTask in project.tasks.withType(Sign)) {
            for (signature in signTask.signatures) {
              deployment.addArtifact(signature)
            }
          }
        }
        name = 'Maven Central Deployer'
        configuration = configurations.archives
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
          authentication(userName: sonatypeUserName, password: sonatypePassword)
        }
        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: sonatypeUserName, password: sonatypePassword)
        }
        pom.project pomConfig
      }
    }
  }
  
  // erma/abc sub-project generates jar with basename "abc"
  def shortProjectName = project.name.split('/')[-1]
  jar.baseName = shortProjectName
  
  task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = shortProjectName
  }
  
  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    baseName = shortProjectName
  }
  
  task dist(dependsOn: [build]) << {
    File distFolder = new File(rootProject.buildDir.getCanonicalPath() + File.separator + 'dist')
    distFolder.mkdirs()
    for (archiveTask in project.tasks.withType(Jar)) {
      copy {
        from archiveTask.archivePath
        into distFolder
      }
    }
    for (signTask in project.tasks.withType(Sign)) {
      copy {
        from signTask.signatureFiles
        into distFolder
      }
    }
  }
  
  artifacts {
    archives jar, sourceJar, javadocJar
  }

  sonarRunner {
      sonarProperties {
         property "sonar.host.url", "http://sonar.orbitz.net/"
         property "sonar.jdbc.url", "jdbc:mysql://sonar.orbitz.net:3306/sonar?useUnicode=true&characterEncoding=utf8"
         property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
         property "sonar.username", "sonar"
         property "sonar.password", "sonar"
      }
  }
}
